.mask {
    /* clip-path: path('M5.072.56C6.157.265 7.31 0 8 0s1.843.265 2.928.56c1.11.3 2.229.655 2.887.87a1.54 1.54 0 0 1 1.044 1.262c.596 4.477-.787 7.795-2.465 9.99a11.775 11.775 0 0 1-2.517 2.453a7.159 7.159 0 0 1-1.048.625c-.28.132-.581.24-.829.24s-.548-.108-.829-.24a7.158 7.158 0 0 1-1.048-.625a11.777 11.777 0 0 1-2.517-2.453C1.928 10.487.545 7.169 1.141 2.692A1.54 1.54 0 0 1 2.185 1.43A62.456 62.456 0 0 1 5.072.56') */
    clip-path: polygon(31.851704367452264% 3.5167496900249016%, 37.78925993404087% 1.9926330269745862%, 43.78462421699209% 0.7174127579480023%, 49.867310954118416% 0.003917846808686171%, 55.96102342000139% 0.5895150904256489%, 61.96525440117327% 1.8215171303950835%, 67.9086252760849% 3.322661528872706%, 73.81239096671206% 4.973338817650197%, 79.68439704865017% 6.733782671207678%, 85.52957844883868% 8.581417221182168%, 90.79121072742919% 11.561377195570856%, 93.32947003615972% 17.029297954538663%, 93.95127681951625% 23.127044004515938%, 94.19586114145699% 29.251426083089196%, 94.03879391583398% 35.37854213514285%, 93.45963472317605% 41.48012413257729%, 92.44250076464417% 47.52404114938521%, 90.97794141558978% 53.47529952281532%, 89.06371679412533% 59.29747122724985%, 86.70471990426721% 64.95401744077444%, 83.91262328558452% 70.40981274287971%, 80.7040284155968% 75.63153439874652%, 77.10220850557417% 80.5903574042979%, 73.12545991692434% 85.25345012181305%, 68.77626808008404% 89.57124767829355%, 64.08445217130497% 93.51407463322383%, 59.05256349990289% 97.00950614257663%, 53.58308335792312% 99.75909291730781%, 47.59964015758467% 100.0%, 42.06598500393088% 97.38935777016523%, 36.98553162069409% 93.96581808481834%, 32.25429918078416% 90.07038798886695%, 27.861887804795373% 85.79656158965496%, 23.838336764325316% 81.17376877914879%, 20.191427253337647% 76.24797504795534%, 16.933623855197265% 71.05682718095473%, 14.089981505403056% 65.62773079182999%, 11.677658657451929% 59.99371515493904%, 9.709042786475354% 54.189726021121125%, 8.189902786131587% 48.25214949307101%, 7.118743655040462% 42.21762021652711%, 6.487166584747278% 36.12122468357027%, 6.280000717480883% 29.995614862251156%, 6.477001773159975% 23.86952442456446%, 7.054357531504029% 17.767416893344908%, 9.200756541068984% 12.124190939989193%, 14.240927984263811% 8.810427177217598%, 20.08338589170267% 6.954247837181429%, 25.954113324488397% 5.18957388582795%, 31.851704367452264% 3.5167496900248967%);
}

.mask>div>div {
    content: '';
    /* position: absolute; */
    /* height: 100%;
    width: 20px; */
    background-color: white;
    box-shadow: 0 0 10px white;
    filter: blur(1px);
    opacity: 0.7;
    transform: scaleY(1.5) translateY(-0) translateX(-30px) rotate(-20deg);
    transition: all .3s linear;
    pointer-events: none;
}

.mask:hover>div>div {
    transform: scaleY(1.5) translateY(-0) translateX(500%) rotate(-20deg);
}

.hoverable {
    /* color: rgba(255, 0, 0, 0.192); */
    color: transparent;
}

/*
website for converting svgs into 
https://path-to-points.netlify.app/

python script for fixing the polygon:

input = '' # copy the content of the clip-path: polygon(...) from the website after converting the svg

input = input.split('%, ')
input = input[:-1]
for i in range(0, len(input)):
    input[i] = input[i].split('% ');

for i in range(0, len(input)):
    input[i] = [float(input[i][0]), float(input[i][1])]

list = input
max = 0
for element in list:
    if(element[0] > max): max = element[0]
    if(element[1] > max): max = element[1]

newList = []
for element in list:
    newList.append([ element[0]*100/max, element[1]*100/max ])
    
path = ''
for element in newList:
    path += str(element[0]) + '% ' + str(element[1]) + '%, '

path = 'clip-path: polygon(' + path[:-2] + ');'
print(path)

*/